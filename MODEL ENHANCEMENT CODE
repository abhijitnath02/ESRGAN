import os
import cv2
import torch
from torchvision.transforms import ToTensor
from torchvision.utils import save_image


class ESRGAN(torch.nn.Module):
    def __init__(self):
        super(ESRGAN, self).__init__()
        

    def forward(self, x):
        
          
        return x  

def load_model(model_path):
    model = ESRGAN()
    
    state_dict = torch.load(model_path, map_location=torch.device('cpu'), weights_only=True)
    model.load_state_dict(state_dict, strict=False)  # Set strict=False to ignore unexpected keys
    model.eval()
    return model

def process_images(input_folder, output_folder):
    
    os.makedirs(output_folder, exist_ok=True)

    
    model = load_model('weights/RealESRGAN_x4plus.pth')

    for filename in os.listdir(input_folder):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            
            img_path = os.path.join(input_folder, filename)
            img = cv2.imread(img_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img_tensor = ToTensor()(img).unsqueeze(0)

            
            with torch.no_grad():
                sr_tensor = model(img_tensor)

            
            if sr_tensor is not None:
               
                output_path = os.path.join(output_folder, filename)
                save_image(sr_tensor, output_path)
            else:
                print(f"Warning: The model returned None for {filename}")


input_folder = ('PATH OF INPUT FOLDER')
output_folder = ('PATH OF OUTPUT FOLDER') 

process_images(input_folder, output_folder)
